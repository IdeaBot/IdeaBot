<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>380</x>
      <y>60</y>
      <w>330</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>Bot : discord.Client
--
+ __init__(self, config)
- addData(self, name[, content_from="DEFAULT"])
+ registerCommand(self, command)
+ registerPlugin(self, plugin)
# on_message(self, msg)
--
// dictionary of loaded data files (config, perms, etc.). Should be filled during __init__
- data : dict
- commands : list
- plugins : list
+ mutex // To ensure no weirdness happens with send_message calls (unless this is already thread safe)
--
(public static final vars)
CREDENTIALS
CHANNELS
PERMS
FORUM_DISCORD_USER
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>160</x>
      <y>430</y>
      <w>100</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>Scraper
&lt;&lt;interface&gt;&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>630</x>
      <y>390</y>
      <w>240</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>Command
// A command is something which happens in response to a message sent in discord
&lt;&lt;interface&gt;&gt;
--
+ __init__(self[, perms])
- _matches(self, msg) : bool
+ matches(self, msg) : bool
- _action(sefl, msg, send_msg)
+ action(self, msg, send_msg : func)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>360</x>
      <y>390</y>
      <w>220</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>Plugin
// A plugin is something which runs in the background, not interacting with discord messages
&lt;&lt;interface&gt;&gt;
--
+ __init__(self, send_msg : func)
+ start(self,) // called by Bot
- action(self,) // event done on every loop</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>250</x>
      <y>430</y>
      <w>130</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.
can include</panel_attributes>
    <additional_attributes>10.0;20.0;110.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>720</x>
      <y>120</y>
      <w>300</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>for command in commands:
  if command._matches(msg):
    command._action(msg, self.send_message)
    break
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>540</x>
      <y>150</y>
      <w>200</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;180.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>150</x>
      <y>340</y>
      <w>440</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>TODO
--
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>590</x>
      <y>570</y>
      <w>200</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>DirectOnlyCommand
&lt;&lt;interface&gt;&gt;
--
- user : func
--
# __init__(self, user)
# _matches(self, msg) : bool
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>400</x>
      <y>550</y>
      <w>160</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>Due to scoping issues
user must be function
that returns the user
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>210</x>
      <y>650</y>
      <w>350</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>mentioned = self.user().mention in message.content
return mentioned and super()._matches(message)
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>550</x>
      <y>630</y>
      <w>60</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>40.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>550</x>
      <y>570</y>
      <w>60</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>40.0;30.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>670</x>
      <y>510</y>
      <w>30</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>810</x>
      <y>570</y>
      <w>240</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>BenchmarkableCommand
&lt;&lt;interface&gt;&gt;
--
# _action(self, message, send_func)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>690</x>
      <y>730</y>
      <w>250</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>Command Implementations...</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>660</x>
      <y>320</y>
      <w>30</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;70.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>450</x>
      <y>320</y>
      <w>30</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;70.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>820</x>
      <y>510</y>
      <w>30</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>1090</x>
      <y>570</y>
      <w>250</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>start = time.time()
super()._action(message, send_func)
if "bnechmark" in message.content:
  end_time = time.time()
  print(end_time-start_time)
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1040</x>
      <y>610</y>
      <w>70</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;50.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>710</x>
      <y>660</y>
      <w>30</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;70.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>830</x>
      <y>630</y>
      <w>30</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;100.0;10.0;10.0</additional_attributes>
  </element>
</diagram>
